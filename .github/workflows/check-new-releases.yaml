name: Check new builds and release them

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
  schedule:
    - cron: '53 0 * * *' # Daily at 00:53 UTC
  workflow_call:

jobs:
  download-builds:
    name: Build project
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create credentials file
        env:
          CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ACCESS_SECRET: ${{ secrets.ACCESS_SECRET }}
        run: |
          touch credentials.txt
          echo "[1]" >> credentials.txt
          echo "consumer_key = $CONSUMER_KEY" >> credentials.txt
          echo "consumer_secret = " >> credentials.txt
          echo "access_token = $ACCESS_TOKEN" >> credentials.txt
          echo "access_secret = $ACCESS_SECRET" >> credentials.txt
          cat credentials.txt
      - name: Install python dependencies
        run: pip install -r requirements.txt
      - name: Create folder for storing the builds
        run: mkdir output; cat credentials.txt
      - name: Run download script
        run: python3 launchpad_downloader.py --repository-url ~paolosottovia/test-spark-build/+git/test-spark-build --branch-prefix spark- --credential-file credentials.txt --output-folder output
      - name: Check downloaded builds
        run: ls output
      - name: Zip builds
        run: zip -r output.zip output
      - name: Store builds
        uses: actions/upload-artifact@v2
        with:
          name: releases
          path: output.zip
      - name: Generate matrix with all built versions
        id: set-matrix
        run: |
          echo "::set-output name=matrix::$(ls -l output/ | awk -F ' ' '{print $9}' |  jq -R -s -c 'split("\n") | map(select(length > 0))')"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
  release-artifact:
    needs: download-builds
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.download-builds.outputs.matrix) }}
    steps:
      - name: Print release version
        run: echo ${{ matrix.version }}
      - name: Download releases
        uses: actions/download-artifact@v2
        with:
          name: releases
      - name: Unzip releases
        run: unzip output.zip
      - name: Test output
        run: ls output/
      - name: package update
        run: |
          cd output/${{ matrix.version }}
          
      - name: Release the package
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ matrix.version }}
          release_name: Release ${{ matrix.version }}
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: output/${{ matrix.version }}/${{ matrix.version }}-bin-custom-spark.tgz
          asset_name: ${{ matrix.version }}.tgz
          asset_content_type: application/zip
      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: output/${{ matrix.version }}/${{ matrix.version }}-bin-custom-spark.tgz.sha512
          asset_name: ${{ matrix.version }}.sha512
          asset_content_type: application/txt
      
        

  